services:
  #  Metrics collector.
  #  It scrapes targets defined in --promscrape.config
  #  And forward them to --remoteWrite.url
  vmagent:
    image: victoriametrics/vmagent:v1.115.0
    container_name: vmagent
    depends_on:
      - "victoriametrics"
    ports:
      - 8429:8429
    volumes:
      - vmagent_data:/vmagentdata
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--promscrape.config=/etc/prometheus/prometheus.yml"
      - "--remoteWrite.url=http://victoriametrics:8428/api/v1/write"
    restart: always
    networks:
      - compose

  # VictoriaMetrics instance, a single process responsible for
  # storing metrics and serve read requests.
  victoriametrics:
    image: victoriametrics/victoria-metrics:v1.115.0
    container_name: victoriametrics
    ports:
      - 8428:8428
      - 8089:8089
      - 8089:8089/udp
      - 2003:2003
      - 2003:2003/udp
      - 4242:4242
    volumes:
      - vm_data:/storage
    command:
      - "--storageDataPath=/storage"
      - "--graphiteListenAddr=:2003"
      - "--opentsdbListenAddr=:4242"
      - "--httpListenAddr=:8428"
      - "--influxListenAddr=:8089"
      - "--vmalert.proxyURL=http://vmalert:8880"
    restart: always
    networks:
      - compose

  grafana:
    image: grafana/grafana:11.5.0
    container_name: grafana
    depends_on:
      - "victoriametrics"
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/single.yml:/etc/grafana/provisioning/datasources/single.yml
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/victoriametrics.json:/var/lib/grafana/dashboards/vm.json
      - ./grafana/vmagent.json:/var/lib/grafana/dashboards/vmagent.json
      - ./grafana/vmalert.json:/var/lib/grafana/dashboards/vmalert.json
    restart: always
    networks:
      - compose

  # vmalert executes alerting and recording rules
  vmalert:
    image: victoriametrics/vmalert:v1.115.0
    container_name: vmalert
    depends_on:
      - "victoriametrics"
      - "alertmanager"
    ports:
      - 8880:8880
    volumes:
      - ./rules/alerts.yml:/etc/alerts/alerts.yml
      - ./rules/alerts-health.yml:/etc/alerts/alerts-health.yml
      - ./rules/alerts-vmagent.yml:/etc/alerts/alerts-vmagent.yml
      - ./rules/alerts-vmalert.yml:/etc/alerts/alerts-vmalert.yml
    command:
      - "--datasource.url=http://victoriametrics:8428/"
      - "--remoteRead.url=http://victoriametrics:8428/"
      - "--remoteWrite.url=http://vmagent:8429/"
      - "--notifier.url=http://alertmanager:9093/"
      - "--rule=/etc/alerts/*.yml"
      # display source of alerts in grafana
      - "--external.url=http://127.0.0.1:3000" #grafana outside container
      - '--external.alert.source=explore?orgId=1&left={"datasource":"VictoriaMetrics","queries":[{"expr":{{.Expr|jsonEscape|queryEscape}},"refId":"A"}],"range":{"from":"{{ .ActiveAt.UnixMilli }}","to":"now"}}'
    restart: always
    networks:
      - compose

  # alertmanager receives alerting notifications from vmalert
  # and distributes them according to --config.file.
  alertmanager:
    image: prom/alertmanager:v0.28.0
    container_name: alertmanager
    volumes:
      - ./alertmanager.yml:/config/alertmanager.yml
    command:
      - "--config.file=/config/alertmanager.yml"
    ports:
      - 9093:9093
    restart: always
    networks:
      - compose

volumes:
  vmagent_data: {}
  vm_data: {}
  grafana_data: {}

networks:
  compose:
    external: true  # Using the existing network, not create a new one.
